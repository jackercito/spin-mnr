{"ast":null,"code":"import { ExperimentosServiceService } from './../../services/experimentos-service.service';\nimport { Auth0Service } from '../../../services/auth0.service';\nimport { BotonVerExperimentoComponent } from './../../../componentes/ag-grid/boton-ver-experimento/boton-ver-experimento.component';\nimport { locale } from '../../../componentes/ag-grid/localeText';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/experimentos-service.service\";\nimport * as i2 from \"../../../services/auth0.service\";\nconst OPTIONDATE = {\n  day: '2-digit',\n  month: '2-digit',\n  year: 'numeric'\n};\nexport let ListarExperimentosComponent = /*#__PURE__*/(() => {\n  class ListarExperimentosComponent {\n    constructor(apiExperimento, auth) {\n      this.apiExperimento = apiExperimento;\n      this.auth = auth;\n      this.localeText = locale;\n      this.sizePage = 25;\n      console.log(\"constructor\");\n\n      this._getExperimentos();\n\n      this.gridOptions = {};\n      this.gridOptions.rowModelType = 'infinite';\n      this.gridOptions.rowHeight = 35;\n      this.paginationPageSize = 25;\n      var def = {\n        filter: \"agTextColumnFilter\",\n        filterParams: {\n          caseSensitive: false,\n          newRowsAction: 'keep'\n        },\n        resizable: true,\n        sortable: true,\n        minWidth: 135,\n        floatingFilter: true\n      };\n      this.columnDefs = [{\n        headerName: \"ESPECTROMETRO\",\n        field: \"espectrometro\",\n        ...def\n      }, {\n        headerName: \"SONDA\",\n        field: \"sonda\",\n        ...def\n      }, {\n        headerName: \"MUESTRA\",\n        field: \"muestra\",\n        ...def\n      }, {\n        headerName: \"SOLICITUD\",\n        field: \"solicitud\",\n        ...def\n      }, {\n        headerName: \"USUARIO (ENTRADA)\",\n        field: \"usuario_entrada\",\n        ...def\n      }, {\n        headerName: \"FECHA (ENTRADA)\",\n        field: \"fecha_entrada\",\n        ...def,\n        filter: \"agDateColumnFilter\",\n        valueFormatter: dateFormat,\n        filterParams: {\n          comparator: compararFechas,\n          newRowsAction: 'keep'\n        },\n        suppressMenu: true\n      }, {\n        headerName: \"\",\n        field: \"completo\",\n        suppressMenu: true,\n        ...def,\n        filter: false,\n        minWidth: 25,\n        maxWidth: 25,\n        width: 25,\n        cellStyle: function (params) {\n          if (params.value) return {\n            backgroundColor: 'green',\n            color: 'green'\n          };else return {\n            backgroundColor: 'red',\n            color: 'red'\n          };\n        } //valueGetter: function (param) { return '' }\n\n      }, {\n        headerName: \"USUARIO (SALIDA)\",\n        field: \"usuario_salida\",\n        ...def\n      }, {\n        headerName: \"FECHA (SALIDA)\",\n        field: \"fecha_salida\",\n        ...def,\n        filter: \"agDateColumnFilter\",\n        valueFormatter: dateFormat,\n        filterParams: {\n          comparator: compararFechas,\n          newRowsAction: 'keep'\n        },\n        suppressMenu: true\n      }, {\n        headerName: \"VER\",\n        ...def,\n        filter: false,\n        pinned: \"right\",\n        field: \"value\",\n        cellRenderer: 'botonVerExperimentoComponent',\n        colId: \"params\",\n        width: 100,\n        minWidth: 100\n      }];\n      this.context = {\n        componentParent: this\n      };\n      this.frameworkComponents = {\n        botonVerExperimentoComponent: BotonVerExperimentoComponent\n      };\n    }\n\n    onGridReady(params) {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n      this.autoSizeAll();\n      this.getFiltros();\n    }\n\n    onPageSizeChanged(newPageSize) {\n      this.gridApi.paginationSetPageSize(this.sizePage);\n    }\n\n    ngOnInit() {\n      this.authSubscription = this.auth.loggedIn$.subscribe(loggedIn => {\n        if (loggedIn) {\n          this._getExperimentos();\n        } else {\n          this.experimentos = null;\n\n          this._destroyExperimentosSubscription();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      // Unsubscribe from observables\n      this.authSubscription.unsubscribe();\n\n      this._destroyExperimentosSubscription();\n    }\n\n    onFilterChanged(value) {\n      this.guardar();\n\n      try {\n        this.gridApi.setQuickFilter(value);\n      } catch (err) {}\n    }\n\n    getFiltros() {\n      if (localStorage.getItem('ColumnStateExperimentos') != \"\" && localStorage.getItem('ColumnStateExperimentos') != null) {\n        var columnStateToken = JSON.parse(localStorage.getItem('ColumnStateExperimentos'));\n        this.gridColumnApi.setColumnState(columnStateToken);\n      }\n\n      if (localStorage.getItem('FilterModelExperimentos') != \"\" && localStorage.getItem('FilterModelExperimentos') != null) {\n        var filterModelToken = JSON.parse(localStorage.getItem('FilterModelExperimentos'));\n        this.gridApi.setFilterModel(filterModelToken);\n      }\n\n      if (localStorage.getItem('SortModelExperimentos') != \"\" && localStorage.getItem('SortModelExperimentos') != null) {\n        var sortModelToken = JSON.parse(localStorage.getItem('SortModelExperimentos'));\n        this.gridApi.setSortModel(sortModelToken);\n      }\n    }\n\n    resetearFiltros() {\n      localStorage.setItem('ColumnStateExperimentos', \"\");\n      localStorage.setItem('FilterModelExperimentos', \"\");\n      localStorage.setItem('SortModelExperimentos', \"\");\n      this.gridApi.setFilterModel(null);\n      this.gridColumnApi.resetColumnState();\n      this.gridColumnApi.resetColumnGroupState();\n      this.gridApi.setSortModel(null);\n      this.gridApi.onFilterChanged();\n    }\n\n    autoSizeAll() {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function (column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds);\n    }\n\n    onBtExport() {\n      var params = {\n        processCellCallback: function (param) {\n          var valor = param.value;\n          ;\n\n          if (param.value) {\n            switch (param.column.colDef.field) {\n              case \"fecha_entrada\":\n                valor = new Date(param.value).toLocaleDateString('es-ES', OPTIONDATE);\n                break;\n\n              case \"fecha_salida\":\n                valor = new Date(param.value).toLocaleDateString('es-ES', OPTIONDATE);\n                break;\n\n              default:\n                return param.value;\n            }\n          }\n\n          return valor;\n        }\n      };\n      this.gridApi.exportDataAsCsv(params);\n    }\n\n    guardar() {\n      localStorage.setItem('ColumnStateExperimentos', JSON.stringify(this.gridColumnApi.getColumnState()));\n      localStorage.setItem('FilterModelExperimentos', JSON.stringify(this.gridApi.getFilterModel()));\n      localStorage.setItem('SortModelExperimentos', JSON.stringify(this.gridApi.getSortModel()));\n    }\n\n    _getExperimentos() {\n      // Subscribe to dragons API observable\n      this.experimentosSubscription = this.apiExperimento.getExperimentos$().subscribe(data => {\n        this.rowData = data;\n      }, err => console.warn(err), () => console.log('Request complete'));\n    }\n\n    _destroyExperimentosSubscription() {\n      // If a dragons subscription exists, unsubscribe\n      if (this.experimentosSubscription) {\n        this.experimentosSubscription.unsubscribe();\n      }\n    }\n\n  }\n\n  ListarExperimentosComponent.ɵfac = function ListarExperimentosComponent_Factory(t) {\n    return new (t || ListarExperimentosComponent)(i0.ɵɵdirectiveInject(i1.ExperimentosServiceService), i0.ɵɵdirectiveInject(i2.Auth0Service));\n  };\n\n  ListarExperimentosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListarExperimentosComponent,\n    selectors: [[\"app-listar-experimentos\"]],\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"col-md-12\"], [\"rowSelection\", \"single\", \"rowHeight\", \"40\", 1, \"ag-theme-fresh\", 2, \"width\", \"100%\", \"height\", \"720px\", 3, \"localeText\", \"rowData\", \"columnDefs\", \"pagination\", \"paginationPageSize\", \"frameworkComponents\", \"context\", \"filterChanged\", \"gridReady\"], [1, \"col-md-6\", \"derecha\"], [2, \"margin-left\", \"20px\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"glyphicon\", \"glyphicon-download\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"glyphicon\", \"glyphicon-remove\"]],\n    template: function ListarExperimentosComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\")(1, \"br\");\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"ag-grid-angular\", 1);\n        i0.ɵɵlistener(\"filterChanged\", function ListarExperimentosComponent_Template_ag_grid_angular_filterChanged_3_listener($event) {\n          return ctx.onFilterChanged($event);\n        })(\"gridReady\", function ListarExperimentosComponent_Template_ag_grid_angular_gridReady_3_listener($event) {\n          return ctx.onGridReady($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"label\", 3)(7, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ListarExperimentosComponent_Template_button_click_7_listener() {\n          return ctx.onBtExport();\n        });\n        i0.ɵɵtext(8, \" Exportar CSV \\u00A0\\u00A0 \");\n        i0.ɵɵelement(9, \"span\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 2);\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelementStart(12, \"a\", 6);\n        i0.ɵɵlistener(\"click\", function ListarExperimentosComponent_Template_a_click_12_listener() {\n          return ctx.resetearFiltros();\n        });\n        i0.ɵɵtext(13, \" Borrar Filtros \\u00A0 \");\n        i0.ɵɵelement(14, \"span\", 7);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"localeText\", ctx.localeText)(\"rowData\", ctx.rowData)(\"columnDefs\", ctx.columnDefs)(\"pagination\", true)(\"paginationPageSize\", ctx.paginationPageSize)(\"frameworkComponents\", ctx.frameworkComponents)(\"context\", ctx.context);\n      }\n    },\n    styles: [\".izquierda[_ngcontent-%COMP%]{float:left}.derecha[_ngcontent-%COMP%]{float:right}\"]\n  });\n  return ListarExperimentosComponent;\n})();\n\nfunction compararFechas(filterLocalDateAtMidnight, cellValue) {\n  var dateAsString = cellValue;\n\n  if (dateAsString != null) {\n    var dateParts = dateAsString.split(\"-\");\n    var cellDate = new Date(Number(dateParts[0]), Number(dateParts[1]) - 1, Number(dateParts[2].substr(0, 2)));\n\n    if (filterLocalDateAtMidnight.getTime() == cellDate.getTime()) {\n      return 0;\n    }\n\n    if (cellDate < filterLocalDateAtMidnight) {\n      return -1;\n    }\n\n    if (cellDate > filterLocalDateAtMidnight) {\n      return 1;\n    }\n  }\n}\n\nfunction dateFormat(params) {\n  if (params.value !== undefined && params.value != null) return new Date(params.value).toLocaleDateString('es-ES', OPTIONDATE);else return '';\n}","map":null,"metadata":{},"sourceType":"module"}