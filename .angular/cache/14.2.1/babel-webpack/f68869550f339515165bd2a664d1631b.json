{"ast":null,"code":"import { Router } from '@angular/router';\nimport { BehaviorSubject, of, timer } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport * as auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let Auth0Service = /*#__PURE__*/(() => {\n  class Auth0Service {\n    constructor(router) {\n      this.router = router;\n      this._Auth0 = new auth0.WebAuth({\n        clientID: AUTH_CONFIG.CLIENT_ID,\n        domain: AUTH_CONFIG.CLIENT_DOMAIN,\n        responseType: AUTH_CONFIG.RESPONSE_TYPE,\n        audience: AUTH_CONFIG.AUDIENCE,\n        redirectUri: AUTH_CONFIG.REDIRECT,\n        scope: 'openid'\n      }); // Create a stream of logged in status to communicate throughout app\n\n      this.loggedIn = false;\n      this.loggedIn$ = new BehaviorSubject(this.loggedIn); // If app auth token is not expired, request new token\n\n      if (JSON.parse(localStorage.getItem('expires_at')) > Date.now()) {\n        this.renewToken();\n      }\n    }\n\n    _setLoggedIn(value) {\n      // Update login status subject\n      this.loggedIn$.next(value);\n      this.loggedIn = value;\n    }\n\n    login() {\n      // Auth0 authorize request\n      this._Auth0.authorize();\n    }\n\n    handleLoginCallback() {\n      // When Auth0 hash parsed, get profile\n      this._Auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken) {\n          window.location.hash = '';\n          this.getUserInfo(authResult);\n        } else if (err) {\n          console.error(`Error: ${err.error}`);\n        }\n      });\n    }\n\n    getUserInfo(authResult) {\n      this.loggingIn = true; // Use access token to retrieve user's profile and set session\n\n      this._Auth0.client.userInfo(authResult.accessToken, (err, profile) => {\n        this._setSession(authResult, profile);\n      });\n    }\n\n    _setSession(authResult, profile) {\n      // Save session data and update login status subject\n      this.expiresAt = authResult.expiresIn * 1000 + Date.now(); // Store expiration in local storage to access in constructor\n\n      localStorage.setItem('expires_at', JSON.stringify(this.expiresAt));\n      this.accessToken = authResult.accessToken;\n\n      if (profile) {\n        this.userProfile = profile;\n      }\n\n      this.scopes = authResult.scope;\n\n      this._setLoggedIn(true);\n\n      this.loggingIn = false; // Schedule access token renewal\n\n      this.scheduleRenewal();\n    }\n\n    _clearExpiration() {\n      // Remove token expiration from localStorage\n      localStorage.removeItem('expires_at');\n    }\n\n    logout() {\n      // Remove data from localStorage\n      this._clearExpiration(); // Remove token and profile, update login status subject,\n      // and log out of Auth0 authentication session\n      // This does a refresh and redirects back to homepage\n      // Make sure you have the returnTo URL in your Auth0\n      // Dashboard Application settings in Allowed Logout URLs\n\n\n      this._Auth0.logout({\n        returnTo: AUTH_CONFIG.RETURN_URL,\n        clientID: AUTH_CONFIG.CLIENT_ID\n      });\n    }\n\n    get tokenValid() {\n      // Check if current time is past access token's expiration\n      return Date.now() < JSON.parse(localStorage.getItem('expires_at'));\n    }\n\n    renewToken() {\n      // Check for valid Auth0 session\n      this._Auth0.checkSession({}, (err, authResult) => {\n        if (authResult && authResult.accessToken) {\n          this.getUserInfo(authResult);\n        } else {\n          this._clearExpiration();\n        }\n      });\n    }\n\n    get authenticated() {\n      // Check if current date is greater than\n      // expiration and user is currently logged in\n      return Date.now() < this.expiresAt && this.loggedIn;\n    }\n\n    checkScopes(listaScopes) {\n      if (this.scopes != null) {\n        const grantedScopes = this.scopes.split(' ');\n        if (grantedScopes.includes('all:administrador')) return true;\n        return listaScopes.every(scope => grantedScopes.includes(scope));\n      }\n\n      return;\n    }\n\n    scheduleRenewal() {\n      // If last token is expired, do nothing\n      if (!this.tokenValid) {\n        return;\n      } // Unsubscribe from previous expiration observable\n\n\n      this.unscheduleRenewal(); // Create and subscribe to expiration observable\n\n      const expiresIn$ = of(this.expiresAt).pipe(mergeMap(expires => {\n        const now = Date.now(); // Use timer to track delay until expiration\n        // to run the refresh at the proper time\n\n        return timer(Math.max(1, expires - now));\n      }));\n      this.refreshSub = expiresIn$.subscribe(() => {\n        this.renewToken();\n        this.scheduleRenewal();\n      });\n    }\n\n    unscheduleRenewal() {\n      if (this.refreshSub) {\n        this.refreshSub.unsubscribe();\n      }\n    }\n\n  }\n\n  Auth0Service.ɵfac = function Auth0Service_Factory(t) {\n    return new (t || Auth0Service)(i0.ɵɵinject(i1.Router));\n  };\n\n  Auth0Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Auth0Service,\n    factory: Auth0Service.ɵfac,\n    providedIn: 'root'\n  });\n  return Auth0Service;\n})();","map":null,"metadata":{},"sourceType":"module"}